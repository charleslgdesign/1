{"ast":null,"code":"var _jsxFileName = \"/Users/charleslynchgerrard/Desktop/1/src/GridConcept.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst img1 = '/img/grid-development-2.png';\nconst img2 = '/img/amazon-screenshot.png';\nconst img3 = '/img/grid-development-3.png';\nconst img4 = '/img/screen-query-sketch.png';\nfunction GridConcept() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-block\",\n      children: [\"In my wireframing for the grid, I found that the ideal amount of products on the page needed a ratio of roughly \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"2:3.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 150\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"small-image\",\n        src: img2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 51\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 56\n      }, this), \"This is because when I looked at similar outputs such as Amazon's grid, there is use of the golden ratio of thirds in the design. However, there is definitely a maticulously cluttered feeling of the layout that could be attributed to a dark pattern.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 310\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 315\n      }, this), \"This was interesting to me since I assumed the \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Golden Ratio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 52\n      }, this), \" was only useful for aesthetics, however it's very relevant to \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"balance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 134\n      }, this), \" when designing UI.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 5\n      }, this), \"In order to make the website simple and cohesive I planned out 3 layouts that the screen snaps to, depending on the screen size. When planning this out I first found the 3 most common dimensions for mobile, tablet, and desktop.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 6\n      }, this), \"When I looked into responsive design. There was a research gap into the optimal way to design a layout with only 3 options. In order to get a range for each screen size query I did brief research into the minimum and maximum dimensions for each medium.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"sketch\",\n      src: img1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"sketch\",\n      src: img3\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-block\",\n      children: [\"The use of 2:3 ratio was applied to 3 main settings of the grid. These were \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Mobile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 112\n      }, this), \", \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Tablet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 127\n      }, this), \" , and \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Desktop.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 147\n      }, this), \" This constitutes the following column setting: 1 item in Mobile, 3 in Tablet, and lastly 4 in Desktop.  \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 267\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 272\n      }, this), \"In my initial research, I devised a set of grid meassurements that would help keep the different grid setting to run at the best possible performance. These were merely a guide, that were re adjusted when it came to practically applying them in react. I created the first dimensions by colating multiple averages for screen sizes. Through this process, I found the most \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"normal (average)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 46\n      }, this), \" screen sizes that I based my grid designs around. These were:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Mobile:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }, this), \"min width = 320\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }, this), \"average width = 384\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }, this), \"max width = 480\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }, this), \"min height = 570\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }, this), \"average height = 821\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }, this), \"max height = 1080\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Tablet:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this), \"min width = 480\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }, this), \"average width = 745\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this), \"max width = 767\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this), \"min height = 600\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this), \"average height = 821\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }, this), \"max height = 1280\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Desktop:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }, this), \"min width = 1280\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }, this), \"average width = 1645\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }, this), \"max width = 1645\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this), \"min height = 720\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }, this), \"average height = 964\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }, this), \"max height = 964\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }, this), \"This is shown in the following diagram below.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"sketch\",\n        src: img4\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 43\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 48\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n}\n_c = GridConcept;\nexport default GridConcept;\nvar _c;\n$RefreshReg$(_c, \"GridConcept\");","map":{"version":3,"names":["React","img1","img2","img3","img4","GridConcept"],"sources":["/Users/charleslynchgerrard/Desktop/1/src/GridConcept.js"],"sourcesContent":["import React from 'react'\n\nconst img1 = '/img/grid-development-2.png'\nconst img2 = '/img/amazon-screenshot.png'\nconst img3 = '/img/grid-development-3.png'\nconst img4 = '/img/screen-query-sketch.png'\n\n\n\n\nfunction GridConcept() {\n  return (\n    <div><div className='text-block'>In my wireframing for the grid, I found that the ideal amount of products on the page needed a ratio of roughly <b>2:3.</b>\n    <br/>\n    <br/><img className='small-image' src={img2}/><br/><br/>This is because when I looked at similar outputs such as Amazon's grid, there is use of the golden ratio of thirds in the design. However, there is definitely a maticulously cluttered feeling of the layout that could be attributed to a dark pattern.<br/><br/>\n    This was interesting to me since I assumed the <b>Golden Ratio</b> was only useful for aesthetics, however it's very relevant to <b>balance</b> when designing UI. \n    <br/>\n    <br/>\n    In order to make the website simple and cohesive I planned out 3 layouts that the screen snaps to, depending on the screen size. \n\nWhen planning this out I first found the 3 most common dimensions for mobile, tablet, and desktop. \n\n<br/><br/>\n\nWhen I looked into responsive design. There was a research gap into the optimal way to design a layout with only 3 options. In order to get a range for each screen size query I did brief research into the minimum and maximum dimensions for each medium. \n    <br/>\n    <br/> \n    \n    </div><img className='sketch' src={img1}/>\n    <img className='sketch' src={img3}/>\n      <div className='text-block' >The use of 2:3 ratio was applied to 3 main settings of the grid. These were <b>Mobile</b>, <b>Tablet</b> , and <b>Desktop.</b> This constitutes the following column setting: 1 item in Mobile, 3 in Tablet, and lastly 4 in Desktop.  <br/><br/>\n      In my initial research, I devised a set of grid meassurements that would help keep the different grid setting to run at the best possible performance. These were merely a guide, that were re adjusted when it came to practically applying them in react. I created the first dimensions by colating multiple averages for screen sizes. \n      Through this process, I found the most <b>normal (average)</b> screen sizes that I based my grid designs around. These were: \n      <br/><br/>\n      <b>Mobile:</b>\n      <br/>min width = 320\n      <br/>average width = 384\n      <br/>max width = 480\n\n      <br/>min height = 570\n      <br/>average height = 821\n      <br/>max height = 1080\n      <br/><br/>\n      <b>Tablet:</b>\n      <br/>min width = 480 \n      <br/>average width = 745\n      <br/>max width = 767\n      <br/>min height = 600\n      <br/>average height = 821\n      <br/>max height = 1280\n      <br/><br/>\n      <b>Desktop:</b>\n      <br/>min width = 1280\n      <br/>average width = 1645\n      <br/>max width = 1645\n      <br/>min height = 720\n      <br/>average height = 964\n      <br/>max height = 964\n      <br/>\n      <br/>\n      This is shown in the following diagram below. \n      <br/>\n      <br/>\n\n\n\n\n      <img className='sketch' src={img4}/><br/><br/></div></div>\n  )\n}\n\nexport default GridConcept"],"mappings":"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"},"metadata":{},"sourceType":"module"}